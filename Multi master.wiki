The goal of this tutorial is to show you how use Multi Master, and aggregate databases with the same name but with different data from differents master on the same slave.

Example :
*  '''master1''' => a French subsidiary
*  '''master2''' => a British subsidiary

Both have the same database PRODUCTION but the data are totally differents.

[[File:http://www.mysqlplus.net/wp-content/uploads/2014/06/ScreenShot038.png]]

''(screenshot made from my own tool of monitoring : pmacli, you have to read 10.10.16.232 on master2 and not 10.10.16.235 the fault to my admin system :p)''


We will start with 3 servers (2 masters and 1 slave), you can add more master if needed. For this tutorial I used Ubuntu 12.04. I let you choose the right procedure for your distribution on [[https://downloads.mariadb.org/mariadb/repositories/|MariaDB Downloads]]

= Informations =

* 10.10.16.231 : first master (called after with '''master1''') => a French subsidiary
* 10.10.16.232 : second master (called after with '''master2''')  => a British subsidiary
* 10.10.16.233 : slave (multi-master) (called after with '''slave''')

If you have already your 3 servers correctly installed go directly to : "Dump your databases"

= Default installation on 3 servers =

<source lang="bash">
apt-get -y install python-software-properties
apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
</source>


The main reason I put it in a different file because we use a configuration manager as chef and this one overright /etc/apt/sources.list, the other reason if any trouble just remove this file and you restart with default configuration.


<source lang="bash">
echo "deb http://mirror.stshosting.co.uk/mariadb/repo/10.0/ubuntu precise main" > /etc/apt/sources.list.d/mariadb.list
</source>


<source lang="bash">
apt-get update
apt-get install mariadb-server
</source>


The goal of this small script is to get the IP of the server and make a CRC32 from this IP to generate one uniq server-id, generally the cmd crc32 isn't installed so we will use the one my MySQL, to set account // password we use the account system of Debian / Ubuntu.


Even if your server have more interface you should have no trouble because the IP should be uniq.


<source lang="bash">
user=`egrep user /etc/mysql/debian.cnf | tr -d ' ' | cut -d '=' -f 2 | head -n1 | tr -d '\n'`
passwd=`egrep password /etc/mysql/debian.cnf | tr -d ' ' | cut -d '=' -f 2 | head -n1 | tr -d '\n'`
ip=`ifconfig eth0 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}' | head -n1 | tr -d '\n'`
crc32=`mysql -u $user -p$passwd -e "SELECT CRC32('$ip')"`
id_server=`echo -n $crc32 | cut -d ' ' -f 2 | tr -d '\n'`
</source>

The file of configuration, not the one I use in production but a minimalist just to show you, because the config may work fine for me but maybe it's will be not the same for you or just crash your server MySQL

If you are interested by my default install for Photobox of MariaDB 10 you see it here : https://github.com/Esysteme/Debian/blob/master/mariadb10_on_ubuntu12_04.sh

<source lang="bash">

cat >> /etc/mysql/conf.d/mariadb10.cnf << EOF

[client]

# default-character-set = utf8

[mysqld]
character-set-client-handshake = FALSE
character-set-server = utf8
collation-server = utf8_general_ci

bind-address        = 0.0.0.0
external-locking    = off
skip-name-resolve

#make a crc32 of ip server
server-id=$id_server

#to prevent auto start of thread slave
skip-slave-start

[mysql]
default-character-set   = utf8
    
EOF
</source>

We restart the server

<source lang="bash">
/etc/init.d/mysql restart
</source>


<source lang="bash">
 * Stopping MariaDB database server mysqld                                        [ OK ]
 * Starting MariaDB database server mysqld                                        [ OK ]
 * Checking for corrupt, not cleanly closed and upgrade needing tables.
</source>



'''Repeat these actions on 3 servers.'''


= Create users on both master =

== Create replication's user on both master ==

on '''master1''' (10.10.16.231)
<source lang="bash">
mysql -u root -p -e "GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'replication'@'%' IDENTIFIED BY 'passwd';flush privileges;"
</source>

on '''master2''' (10.10.16.232)
<source lang="bash">
mysql -u root -p -e "GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'replication'@'%' IDENTIFIED BY 'passwd';flush privileges;"
</source>

== Create an user for external backup ==

On '''master1''' and on '''master2'''
<source lang="bash">
mysql -u root -p -e "GRANT SELECT, LOCK TABLES, RELOAD, REPLICATION CLIENT, SUPER ON *.* TO 'backup'@'10.10.16.%' IDENTIFIED BY 'passwd' WITH GRANT OPTION; flush privileges;"
</source>

= Only in case for test usage =

Considering you didn't have a such configuration and you want to test it

== Create a database on '''master1''' (10.10.16.231) ==

<source lang="sql">
master1 [(none)]> CREATE DATABASE PRODUCTION;
</source>

== Create a database on '''master2''' (10.10.16.232) ==

<source lang="sql">
master2 [(none)]> CREATE DATABASE PRODUCTION;
</source>

= Dump your '''master1''' and '''master2''' databases from '''slave''' (10.10.16.233) =

All the commands until the end have to be done on the '''slave''' server

* <code>--master-data=2</code> get the file (binary log) and the position, and put it at the begining of the dump in comment
* <code>--single-transaction</code> : This option issues a BEGIN SQL statement before dumping data from the server (work only with table with engine InnoDB)

<source lang="bash">
mysqldump -h 10.10.16.231 -u root -p --master-data=2 --single-transaction PRODUCTION > PRODUCTION_10.10.16.231.sql
mysqldump -h 10.10.16.232 -u root -p --master-data=2 --single-transaction PRODUCTION > PRODUCTION_10.10.16.232.sql
</source>

create both new database

<source lang="sql">
slave[(none)]> CREATE DATABASE PRODUCTION_FR;
slave[(none)]> CREATE DATABASE PRODUCTION_UK;
</source>

load the data :

<source lang="bash">
mysql -h 10.10.16.233 -u root -p PRODUCTION_FR < PRODUCTION_10.10.16.231.sql
mysql -h 10.10.16.233 -u root -p PRODUCTION_UK < PRODUCTION_10.10.16.232.sql
</source>

= Set up both replication on '''slave''' =

Edit both dump and get file and position of the binlog and replace it here : (use the comand "less" instead other in hudge files)


== French subsidiary ==

<source lang="bash">
less PRODUCTION_10.10.16.231.sql
</source>

get the line : (file and position will be different)

<source lang="sql">
-- CHANGE MASTER TO MASTER_LOG_FILE='mariadb-bin.000010', MASTER_LOG_POS=771;
</source>

replace file and position in :

<source lang="sql">
CHANGE MASTER 'PRODUCTION_FR' TO MASTER_HOST = "10.10.16.231", MASTER_USER = "replication", MASTER_PASSWORD ="passwd", MASTER_LOG_FILE='mariadb-bin.000010', MASTER_LOG_POS=771;
</source>

== English subsidiary ==

<source lang="bash">
less PRODUCTION_10.10.16.232.sql
</source>

get the line : (file and position will be different, for my test was exactly the same)

<source lang="sql">
-- CHANGE MASTER TO MASTER_LOG_FILE='mariadb-bin.000010', MASTER_LOG_POS=771;
</source>

replace file and position in :

<source lang="sql">
CHANGE MASTER 'PRODUCTION_UK' TO MASTER_HOST = "10.10.16.232", MASTER_USER = "replication", MASTER_PASSWORD ="passwd", MASTER_LOG_FILE='mariadb-bin.000010', MASTER_LOG_POS=771;
</source>

== Rules of replication on config file ==

Unfortunatly the option <code>replicate-rewrite-db</code> doesn't exist on variables and we cannot set up this kind of configuration without restart the slave server.

In part of slave add the following line to <code>/etc/mysql/conf.d/mariadb10.cnf</code>

<source lang="bash">
PRODUCTION_FR.replicate-rewrite-db="PRODUCTION->PRODUCTION_FR"
PRODUCTION_UK.replicate-rewrite-db="PRODUCTION->PRODUCTION_UK"
PRODUCTION_FR.replicate-do-db="PRODUCTION_FR"
PRODUCTION_UK.replicate-do-db="PRODUCTION_UK"
</source>

After you can restart the daemon without problem, but don't forgot to launch the slaves because we skiped it at start ;).

<source lang="bash">
/etc/init.d/mysql restart
</source>


Start the replication :

* one by one :
<source lang="sql">
START SLAVE 'PRODUCTION_FR';
START SLAVE 'PRODUCTION_UK';
</source>

* all in same time :
<source lang="sql">
START ALL SLAVES;
</source>


Now to check the replication :

<source lang="sql">
slave[(none)]>SHOW SLAVE 'PRODUCTION_UK' STATUS;
slave[(none)]>SHOW SLAVE 'PRODUCTION_FR' STATUS;
slave[(none)]>SHOW ALL SLAVES STATUS;
</source>


= Tests =


on '''slave''' :

<source lang="sql">
slave [(none)]> use PRODUCTION_FR;
Database changed
slave [PRODUCTION_FR]> show tables;
Empty set (0.00 sec)

slave [(none)]> use PRODUCTION_UK;
Database changed
slave [PRODUCTION_UK]> show tables;
Empty set (0.00 sec)
</source>


on '''master1''' :

<source lang="sql">
master1 [(none)]> use PRODUCTION;
Database changed
master1 [PRODUCTION]>CREATE TABLE `france` (id int);
Query OK, 0 rows affected (0.13 sec)

master1 [PRODUCTION]> INSERT INTO `france` SET id=1;
Query OK, 1 row affected (0.00 sec)
</source>



on '''master2''' :

<source lang="sql">
master2 [(none)]> use PRODUCTION;
Database changed
master2 [PRODUCTION]>CREATE TABLE `british` (id int);
Query OK, 0 rows affected (0.13 sec)

master2 [PRODUCTION]> INSERT INTO `british` SET id=2;
Query OK, 1 row affected (0.00 sec)
</source>



on '''slave''' :

<source lang="sql">

-- for FRANCE
slave [(none)]> use PRODUCTION_FR;
Database changed
slave [PRODUCTION_FR]> show tables;
+-------------------------+
| Tables_in_PRODUCTION_FR |
+-------------------------+
| france                  |
+-------------------------+
1 row in set (0.00 sec)

slave [PRODUCTION_FR]> SELECT * FROM france;
+------+
| id   |
+------+
|    1 |
+------+
1 row in set (0.00 sec)


-- for British
slave [(none)]> use PRODUCTION_UK;
Database changed


slave [PRODUCTION_UK]> show tables;
+-------------------------+
| Tables_in_PRODUCTION_UK |
+-------------------------+
| british                 |
+-------------------------+
1 row in set (0.00 sec)

slave [PRODUCTION_UK]> SELECT * FROM british;
+------+
| id   |
+------+
|    2 |
+------+
1 row in set (0.00 sec)

</source>

It works !

= Limitations =

'''WARNING''' : it doesn't work with the database specified in query.


This work fine :

<source lang="sql">
USE PRODUCTION;
UPDATE `ma_table` SET id=1 WHERE id =2;
</source>

This query will break the replication :

<source lang="sql">
USE PRODUCTION;
UPDATE `PRODUCTION`.`ma_table` SET id=1 WHERE id =2;
</source>

=> databases `PRODUCTION` does not exist on this server.


== A real example ==


=== Missing update ===
on '''master1'''

<source lang="sql">
master1 [(none)]>UPDATE `PRODUCTION`.`france` SET id=3 WHERE id =1;
Query OK, 1 row affected (0.02 sec)
Rows matched: 1  Changed: 1  Warnings: 0

master1 [(none)]> select * from `PRODUCTION`.`france`;
+------+
| id   |
+------+
|    3 |
+------+
1 row in set (0.00 sec)

</source>

on '''slave'''

<source lang="sql">
slave [PRODUCTION_FR]> SELECT * FROM france;
+------+
| id   |
+------+
|    1 |
+------+
1 row in set (0.00 sec)
</source>

In this case we miss the update, it a real problem, because the replication should crash, our '''slave''' is desynchronized with '''master1''' and we didn't know it.

=== Crash replication ===


on '''master1''':
<source lang="sql">
master1[(none)]> use PRODUCTION;
Database changed


master1 [PRODUCTION]> SELECT * FROM`PRODUCTION`.`france`;
+------+
| id   |
+------+
|    3 |
+------+
1 row in set (0.00 sec)

master1 [PRODUCTION]>UPDATE `PRODUCTION`.`france` SET id=4 WHERE id =3;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

master1 [PRODUCTION]> SELECT * FROM `PRODUCTION`.`france`;
+------+
| id   |
+------+
|    4 |
+------+
1 row in set (0.01 sec)

</source>


''on pmacli''

[[File:http://www.mysqlplus.net/wp-content/uploads/2014/06/ScreenShot039.png]]





on '''slave'''

<source lang="sql">
slave [PRODUCTION_FR]> show slave 'PRODUCTION_FR' status\G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 10.10.16.231
                  Master_User: replication
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mariadb-bin.000010
          Read_Master_Log_Pos: 2737
               Relay_Log_File: mysqld-relay-bin-production_fr.000003
                Relay_Log_Pos: 2320
        Relay_Master_Log_File: mariadb-bin.000010
             Slave_IO_Running: Yes
            Slave_SQL_Running: No
              Replicate_Do_DB: PRODUCTION_FR
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 1146
                   Last_Error: Error 'Table 'PRODUCTION.france' doesn't exist' on query. Default database: 'PRODUCTION_FR'. Query: 'UPDATE `PRODUCTION`.`france` SET id=4 WHERE id =3'
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 2554
              Relay_Log_Space: 2815
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: NULL
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 1146
               Last_SQL_Error: Error 'Table 'PRODUCTION.france' doesn't exist' on query. Default database: 'PRODUCTION_FR'. Query: 'UPDATE `PRODUCTION`.`france` SET id=4 WHERE id =3'
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 2370966657
               Master_SSL_Crl:
           Master_SSL_Crlpath:
                   Using_Gtid: No
                  Gtid_IO_Pos:
1 row in set (0.00 sec)

ERROR: No query specified

</source>


And we got the error which crash replication : Error '''TABLE 'PRODUCTION.france' doesn't exist' ON query. DEFAULT DATABASE: 'PRODUCTION_FR'. Query: 'UPDATE `PRODUCTION`.`france` SET id=4 WHERE id =3'''

= Author = 


[[File:http://www.mysqlplus.net/wp-content/uploads/2014/06/PhotoBox_NewLogo_jan07_1.jpg]]

* Photobox : http://www.photobox.com/
* Author : Aurélien LEQUOY <aurelien.lequoy＠photobox.com> you don’t copy/paste the email, it won’t work. You didn’t think I would post it like that in the open for all bots, right? ;).

= License =

* This article is under : '''The GNU General Public License v3.0''' http://opensource.org/licenses/GPL-3.0
